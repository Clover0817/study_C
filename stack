#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STACK_SIZE 3
#define MAX_STRING 100

typedef struct {
	int num;
	char numString[MAX_STRING];
} element;

typedef struct {
	element stack[MAX_STACK_SIZE];
	int top;
} StackType;

void init(StackType* s) // 스택 초기화 함수

{
	s->top = -1;
}
int is_empty(StackType* s) // 공백 상태 검출 함수

{
	return (s->top == -1);
}
int is_full(StackType* s) // 포화 상태 검출 함수
{
	return (s->top == (MAX_STACK_SIZE - 1));
}
void push(StackType* s, element item) // 삽입함수
{
	if (is_full(s)) {
		fprintf(stderr, "스택 포화 에러\n");
		return;
	}
	else s->stack[++(s->top)] = item;
}
element pop(StackType* s) // 삭제함수
{
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else return s->stack[(s->top)--];
}
element peek(StackType* s) // 피크함수
{
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else return s->stack[s->top];
}

void stack_print(StackType* s)
{
	int i; 

	if (s->top != -1)
		printf("[%d, %s] <- top\n", s->stack[s->top].num, s->stack[s->top].numString);
	else
		printf("<empty>\n");

	for (i = s->top - 1; i > -1; i--)
		printf("[%d, %s]\n", s->stack[i].num, s->stack[i].numString);

	printf("--\n");
}

int main(void)
{
	StackType s;
	element e;

	init(&s);
	stack_print(&s);

	e.num = 10;
	strcpy(e.numString, "ten");
	push(&s, e);
	stack_print(&s);

	e.num = 20;
	strcpy(e.numString, "twenty");
	push(&s, e);
	stack_print(&s);

	e.num = 30;
	strcpy(e.numString, "thirty");
	push(&s, e);
	stack_print(&s);

	e.num = 40;
	strcpy(e.numString, "forty");
	push(&s, e);
	stack_print(&s);

	pop(&s);
	stack_print(&s);

	e.num = 50;
	strcpy(e.numString, "fifty");
	push(&s, e);
	stack_print(&s);

	pop(&s);
	stack_print(&s);

	pop(&s);
	stack_print(&s);

	pop(&s);
	stack_print(&s);
}
