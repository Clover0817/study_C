#define _CRT_SECURE_NO_WARNINGS
#define MAX_STACK_SIZE 3
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char element[100];
typedef struct {
	element data[MAX_STACK_SIZE];
	int top;
}StackType;

void init_stack(StackType* s)
{
	s->top = -1;
}

int is_empty(StackType* s)
{
	return (s->top == -1);
}

int is_full(StackType* s)
{
	return (s->top == (MAX_STACK_SIZE - 1));
}

void push(StackType* s, element item)
{
	if (is_full(s)) {
		fprintf(stderr, "스택 포화 에러\n");
		return;
	}
	else strcpy(s->data[++(s->top)], item);
}

element* pop(StackType* s)
{
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else return &s->data[(s->top)--];
}

element* peek(StackType* s)
{
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else return &s->data[s->top];
}

void stack_print(StackType* s)
{
	int i;

	if (is_empty(s))
		printf("<empty>\n");
	else {
		printf("[%s] <- top\n", s->data[s->top]);
		for (i = (s->top - 1); i > -1; i--)
			printf("[%s]\n", s->data[i]);
	}
	printf("--\n");
}

int main(void)
{
	StackType s;

	init_stack(&s);
	stack_print(&s);
	push(&s, "10, ten");
	stack_print(&s);
	push(&s, "20, twenty");
	stack_print(&s);
	push(&s, "30, thirty");
	stack_print(&s);
	push(&s, "40, forty");
	stack_print(&s);
	pop(&s);
	stack_print(&s);
	push(&s, "50, fifty");
	stack_print(&s);
	pop(&s);
	stack_print(&s);
	pop(&s);
	stack_print(&s);
	pop(&s);
	stack_print(&s);
}
