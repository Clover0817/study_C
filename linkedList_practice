#include <stdio.h>
#include <stdlib.h>

typedef int element;
typedef struct ListNode {
	element data;
	struct ListNode* link;
} ListNode;

void error(char* message)
{
	fprintf(stderr, "%s\n", message);
	exit(1);
}
ListNode* insert_first(ListNode* head, int value)
{
	ListNode* p = (ListNode*)malloc(sizeof(ListNode));
	p->data = value;			
	p->link = head;	
	head = p;	
	return head;
}

ListNode* insert_last(ListNode* head, int value)
{
	ListNode* temp = head;
	ListNode* p = (ListNode*)malloc(sizeof(ListNode));
	p->data = value;
	p->link = NULL;

	if (head == NULL)
		head = p;
	else {
		while (temp->link != NULL)
			temp = temp->link;
		temp->link = p;
	}
	return head;
}
ListNode* insert(ListNode* head, ListNode* pre, element value)
{
	ListNode* p = (ListNode*)malloc(sizeof(ListNode));
	p->data = value;	
	p->link = pre->link;
	pre->link = p;		
	return head;
}

ListNode* delete_first(ListNode* head)
{
	ListNode* removed = (ListNode*)malloc(sizeof(ListNode));
	if (head == NULL)
		return NULL;
	removed = head;	
	head = removed->link;
	free(removed);		
	return head;	
}

ListNode* delete_last(ListNode* head)
{
	ListNode* temp = head;
	ListNode* prevTemp = NULL;

	if (head == NULL)
		error("삭제할 항목이 없음");

	if (head->link == NULL) {
		free(temp);
		head = NULL;
	}
	else {
		while (temp->link != NULL) {
			prevTemp = temp;
			temp = temp->link;
		}
		prevTemp->link = NULL;
		free(temp);
	}
	return head;
}

ListNode* delete(ListNode* head, ListNode* pre)
{
	ListNode* removed;
	removed = pre->link;
	pre->link = removed->link;	
	free(removed);			
	return head;		
}

void print_list(ListNode* head)
{
	for (ListNode* p = head; p != NULL; p = p->link)
		printf("%d->", p->data);
	printf("NULL \n");
}
 
ListNode* concat(ListNode* head1, ListNode* head2)
{
	ListNode* p;

	if (head1 == NULL)
		return head2;
	else if (head2 == NULL)
		return head1;
	else {
		p = head1;
		while (p->link != NULL)
			p = p->link;
		p->link = head2;
		return head1;
	}
}

ListNode* reverse(ListNode* head)
{
	ListNode* p = head, * q = NULL, * r;

	while (p != NULL) {
		r = q;
		q = p;
		p = p->link;
		q->link = r;
	}
	return q;
}

//추가 함수
int is_in_list(ListNode* head, element item)
{
	ListNode* temp = head;

	while (temp != NULL) {
		if (temp->data == item)
			return 1;
		temp = temp->link;
	}
	return 0;
}

int get_length(ListNode* head)
{
	ListNode* temp = head;
	int count = 0;

	while (temp != NULL) {
		temp = temp->link;
		count++;
	}
	return count;
}

int get_total(ListNode* head)
{
	ListNode* temp = head;
	int total = 0;

	while (temp != NULL) {
		total += temp->data;
		temp = temp->link;
	}
	return total;
}

element get_entry(ListNode* head, int pos)
{
	ListNode* temp = head;
	int index = 0;

	if (head == NULL || (pos < 0 && pos >= get_length(head)))
		error("잘못된 인덱스입니다");
	else {
		while (index != pos) {
			temp = temp->link;
			index++;
		}
	}
	return temp->data;
}

ListNode* delete_by_key(ListNode* head, int key)
{
	ListNode* temp = head;
	ListNode* prevTemp = (ListNode*)malloc(sizeof(ListNode));;

	if (temp->data == key)
		return (head = delete_first(head));
	while (temp != NULL) {
		prevTemp = temp;
		temp = temp->link;
		if (temp->data == key)
			return (head = delete(head, prevTemp));
	}
	return head;
}

ListNode* insert_pos(ListNode* head, int pos, element value)
{
	int index = 0;
	ListNode* temp = head;
	ListNode* prevTemp = (ListNode*)malloc(sizeof(ListNode));
	
	if (pos < 0 && pos > get_length(head))
		error("잘못된 인덱스입니다");
	else if (pos == 0)
		return (head = insert_first(head, value));
	while (index != pos) {
		prevTemp = temp;
		temp = temp->link;
		index++;
	}
	return (head = insert(head, prevTemp, value));
}

ListNode* delete_pos(ListNode* head, int pos)
{
	int index = 0;
	ListNode* temp = head;
	ListNode* prevTemp = (ListNode*)malloc(sizeof(ListNode));

	if (pos < 0 && pos >= get_length(head))
		error("잘못된 인덱스입니다");
	else if (pos == 0)
		return (head = delete_first(head));
	while (index != pos) {
		prevTemp = temp;
		temp = temp->link;
		index++;
	}
	return (head = delete(head, prevTemp));
}

int main(void)
{
	ListNode* list1 = NULL, * list2 = NULL, * list3;

	list1 = insert_first(list1, 10);
	list1 = insert_first(list1, 20);
	list1 = insert_first(list1, 30);
	printf("list1 = ");
	print_list(list1);

	list1 = delete_first(list1);
	printf("list1 = ");
	print_list(list1);

	for (int i = 1; i <= 4; i++)
		list2 = insert_last(list2, i * 10 + i);
	printf("list2 = ");
	print_list(list2);

	list2 = delete_last(list2);
	printf("list2 = ");
	print_list(list2);

	list3 = reverse(list2);
	printf("list3 = ");
	print_list(list3);

	list1 = concat(list1, list3);
	printf("list1 = ");
	print_list(list1);

	if (is_in_list(list1, 22))
		printf("22는 리스트에 있습니다.\n");//출력 결과
	else
		printf("22는 리스트에 없습니다.\n");

	printf("list1의 노드 개수는 %d\n", get_length(list1));//5
	printf("list1의 모든 데이터 합은 %d\n", get_total(list1));//20+10+33+22+11 = 96
	printf("list1의 5번째 데이터 값은 %d\n", get_entry(list1, 4));//11
	list1 = delete_by_key(list1, 33);
	printf("list1 = ");
	print_list(list1);//20->10->22->11->NULL
	list1 = insert_pos(list1, 2, 99);
	printf("list1 = ");
	print_list(list1);////20->10->99->22->11->NULL
	list1 = delete_pos(list1, 3);
	printf("list1 = ");
	print_list(list1);////20->10->99->11->NULL

	return 0;
}
